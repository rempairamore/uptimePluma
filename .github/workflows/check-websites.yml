name: Website Availability Check

on:
  schedule:
    - cron: '*/15 * * * *'  # Runs only on default branch automatically
  workflow_dispatch:  # Can be triggered manually on any branch

jobs:
  check-websites:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Check websites
        env:
          TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          TELEGRAM_GROUP: ${{ secrets.TELEGRAM_GROUP }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          #!/bin/bash
          set -euo pipefail
          
          [[ ! -f "websites.json" ]] && { echo "ERROR: websites.json missing"; exit 1; }
          jq empty websites.json 2>/dev/null || { echo "ERROR: Invalid JSON"; exit 1; }
          
          CONFIG=$(jq -r '.settings // {}' websites.json)
          RETRIES=$(echo "$CONFIG" | jq -r '.retries // 3')
          TIMEOUT=$(echo "$CONFIG" | jq -r '.timeout // 10')
          
          NOTIF=$(jq -r '.notifications // {}' websites.json)
          TG_ON=$(echo "$NOTIF" | jq -r '.telegram.enabled // false')
          SLACK_ON=$(echo "$NOTIF" | jq -r '.slack.enabled // false')
          DISCORD_ON=$(echo "$NOTIF" | jq -r '.discord.enabled // false')
          
          # Arrays to store down sites
          declare -a DOWN_SITES=()
          
          send_notifications() {
            local count=${#DOWN_SITES[@]}
            [[ $count -eq 0 ]] && return 0
            
            # Build message with all down sites
            local tg_msg="⚠️ <b>ALERT: $count site(s) down!</b>%0A%0A"
            local slack_msg="⚠️ *ALERT: $count site(s) down!*\n\n"
            local discord_msg="⚠️ @here **ALERT: $count site(s) down!**\n\n"
            
            for site_info in "${DOWN_SITES[@]}"; do
              tg_msg="${tg_msg}• ${site_info}%0A"
              slack_msg="${slack_msg}• ${site_info}\n"
              discord_msg="${discord_msg}• ${site_info}\n"
            done
            
            # Send single notification for all down sites
            if [[ "$TG_ON" == "true" && -n "${TELEGRAM_TOKEN:-}" && -n "${TELEGRAM_GROUP:-}" ]]; then
              curl -sS -X POST "https://api.telegram.org/bot${TELEGRAM_TOKEN}/sendMessage" \
                -d "chat_id=${TELEGRAM_GROUP}" \
                -d "text=$tg_msg" \
                -d "parse_mode=HTML" &>/dev/null || true
            fi
            
            if [[ "$SLACK_ON" == "true" && -n "${SLACK_WEBHOOK:-}" ]]; then
              curl -sS -X POST "$SLACK_WEBHOOK" \
                -H "Content-Type: application/json" \
                -d "{\"text\":\"$slack_msg\"}" &>/dev/null || true
            fi
            
            if [[ "$DISCORD_ON" == "true" && -n "${DISCORD_WEBHOOK:-}" ]]; then
              curl -sS -X POST "$DISCORD_WEBHOOK" \
                -H "Content-Type: application/json" \
                -d "{\"content\":\"$discord_msg\"}" &>/dev/null || true
            fi
          }
          
          check_site() {
            local name=$1 url=$2
            echo "Checking $name..."
            
            local final_status="" final_error=""
            
            for ((attempt=1; attempt<=RETRIES; attempt++)); do
              [[ $attempt -gt 1 ]] && { echo "  Retry $attempt/$RETRIES"; sleep 5; }
              
              response=$(curl -sS -w "\n%{http_code}" -H "User-Agent: Mozilla/5.0" \
                --max-time "$TIMEOUT" -L "$url" 2>&1) && {
                status="${response##*$'\n'}"
                echo "  Status: $status"
                [[ "$status" == "200" ]] && return 0
                final_status="$status"
                continue
              }
              
              case $? in
                28) error="Timeout after ${TIMEOUT}s" ;;
                7)  error="Connection refused" ;;
                6)  error="DNS resolution failed" ;;
                35) error="SSL error" ;;
                *)  error="Connection error (code $?)" ;;
              esac
              
              echo "  Failed: $error"
              final_error="$error"
            done
            
            # Add to down sites list instead of sending notification
            if [[ -n "$final_status" ]]; then
              DOWN_SITES+=("$name (HTTP $final_status): $url")
            else
              DOWN_SITES+=("$name ($final_error): $url")
            fi
            
            return 1
          }
          
          echo "=== Website Availability Check ==="
          
          sites=$(jq -c '.websites[]' websites.json 2>/dev/null || echo "")
          [[ -z "$sites" ]] && { echo "No websites configured"; exit 0; }
          
          total=0 up=0
          
          while IFS= read -r site; do
            name=$(echo "$site" | jq -r '.name // ""')
            url=$(echo "$site" | jq -r '.URL // ""')
            
            [[ -z "$name" || -z "$url" ]] && continue
            
            total=$((total + 1))
            check_site "$name" "$url" && up=$((up + 1))
            echo
          done <<< "$sites"
          
          down=$((total - up))
          
          echo "=== Summary: $up/$total sites up ==="
          
          # Send single notification with all down sites
          send_notifications
          
          [[ $down -eq 0 ]] && exit 0
          [[ $up -eq 0 ]] && exit 2
          exit 1